Tools we used:
==============

VNC:
----

VNC, which stands for "Virtual Networking Computer" is similar to remote X.
However, it has two very big advantages:

1. It retains the same session between two consecutive logins.
2. Its Win32 viewer is only one file, and does not require administrator
permissions to run.

During our first days, when we were given a very crammy screen, we set up a 
VNC server on our Linux workstation, a viewer on a Windows 2000 machine, and 
used the Linux workstation over the network.

It usually worked very well. VNC is not without its flaws, however. 
For instance, using a tiled-image wallpaper, resulted in a very slow rendering
of the screen for some reason.

The VNC homepage is:
http://www.uk.research.att.com/vnc/

Perl:
-----

Perl is a programming language commonly used for writing server-side Web 
applications and for many other system administration tasks. We found it 
useful to program both the compiler and the initial version of the arbitrator
in Perl, because a perl code takes a fraction of time to write, in comparison
to the equivalent C code.

Furthermore, Perl is similar enough to C (if you don't abuse its more powerful
features), that we were able to benefit from having a working Perl code to
base upon.

We would recommend anyone, who can afford to, to write the initial codebase in
Perl (or a similar language such as Python or Ruby), before converting it to
C.

We plan to keep the compiler in Perl, because Perl is much better suited for
tasks like that, because it is available on most UNIX systems, and because the
compiler is not a real-time application.

The Perl homepage is:
http://www.perl.com/

User-Mode Linux
---------------

User-Mode Linux is a version of the Linux kernel that runs as a process on top
of Linux. It gives one a full-fledged (albeit slow) Linux system that can be
run as a user, even without any SUID games. 

Kernel modules that the user writes can be loaded and debugged using gdb, 
and if there is a bug inside one of them, it only crashes the process, 
while the system remains intact.

The User-Mode Linux homepage is:
http://user-mode-linux.sourceforge.net/

CVS
---

CVS stands for Concurrent Versioning System. It is a tool to maintain several
revisions of a source code directory tree. By using BerliOS' remote CVS
server (see below), we worked against CVS and found it extremely helpful.

One of the advantages of using CVS is that we were able to grab the most
up-to-date version of the code from the net, with a few command-line commands.
Not only that, but we were able to grab or view older versions, and compare
between them.

Please note that there is a software project under works called Subversion that 
will eventually offer an even better alternative to CVS. Both CVS and
Subversion are open source software.

The CVS homepage is:
http://www.cvshome.org/

BerliOS
-------

BerliOS is a software hub that is physically located in Germany. We did not
use all of the services that BerliOS offered us, but we made extensive used of
the fact that it gave us a CVS repository. 

At the time of this writing there are two similar services to BerliOS on the 
web: SourceForge and GNU Savanah. All of them offer a good service for hosting
open-source software.

The BerliOS homepage is:
http://developer.berlios.de/

Lessons about C and Kernel Programming:
======================================

jiffies instead of gettimeofday()
---------------------------------

When programming in kernel mode it would make a vast speed improvement to
use jiffies instead of gettimeofday(). jiffies are an integer that represents
the internal time since the machine's startup. They are measured in units of 
1/HZ seconds, where HZ is an architecture-specific constant.

gettimeofday() requires some extra calculations, but retrieving the current
jiffies does not even requires a function call. Furthermore, timers are set
according by jiffies-time, so it saves the overhead of converting from jiffies
to struct timeval and vice versa.




