Tools we used:
==============

VNC:
----

VNC, which stands for "Virtual Networking Computer" is similar to remote X.
However, it has two very big advantages:

1. It retains the same session between two consecutive logins.
2. Its Win32 viewer is only one file, and does not require administrator
permissions to run.

During our first days, when we were given a very crammy screen, we set up a 
VNC server on our Linux workstation, a viewer on a Windows 2000 machine, and 
used the Linux workstation over the network.

It usually worked very well. VNC is not without its flaws, however. 
For instance, using a tiled-image wallpaper, resulted in a very slow rendering
of the screen for some reason.

The VNC home page is:
http://www.uk.research.att.com/vnc/

Perl:
-----

Perl is a programming language commonly used for writing server-side Web 
applications and for many other system administration tasks. We found it 
useful to program both the compiler and the initial version of the arbitrator
in Perl, because a perl code takes a fraction of time to write, in comparison
to the equivalent C code.

Furthermore, Perl is similar enough to C (if you don't abuse its more powerful
features), that we were able to benefit from having a working Perl code to
base upon.

We would recommend anyone, who can afford to, to write the initial code base in
Perl (or a similar language such as Python or Ruby), before converting it to
C.

We plan to keep the compiler in Perl, because Perl is much better suited for
tasks like that, because it is available on most UNIX systems, and because the
compiler is not a real-time application.

The Perl home page is:
http://www.perl.com/

User-Mode Linux
---------------

User-Mode Linux is a version of the Linux kernel that runs as a process on top
of Linux. It gives one a full-fledged (albeit slow) Linux system that can be
run as a user, even without any SUID games. 

Kernel modules that the user writes can be loaded and debugged using gdb, 
and if there is a bug inside one of them, it only crashes the process, 
while the system remains intact.

The User-Mode Linux home page is:
http://user-mode-linux.sourceforge.net/

CVS
---

CVS stands for Concurrent Versioning System. It is a tool to maintain several
revisions of a source code directory tree. By using BerliOS' remote CVS
server (see below), we worked against CVS and found it extremely helpful.

One of the advantages of using CVS is that we were able to grab the most
up-to-date version of the code from the net, with a few command-line commands.
Not only that, but we were able to grab or view older versions, and compare
between them.

Please note that there is a software project under works called Subversion that 
will eventually offer an even better alternative to CVS. Both CVS and
Subversion are open source software.

The CVS home page is:
http://www.cvshome.org/

BerliOS
-------

BerliOS is a software hub that is physically located in Germany. We did not
use all of the services that BerliOS offered us, but we made extensive used of
the fact that it gave us a CVS repository. 

At the time of this writing there are two similar services to BerliOS on the 
web: SourceForge and GNU Savannah. All of them offer a good service for hosting
open-source software.

The BerliOS home page is:
http://developer.berlios.de/

Lessons about C and Kernel Programming:
======================================

jiffies instead of gettimeofday()
---------------------------------

When programming in kernel mode it would make a vast speed improvement to
use jiffies instead of gettimeofday(). jiffies are an integer that represents
the internal time since the machine's startup. They are measured in units of 
1/HZ seconds, where HZ is an architecture-specific constant.

gettimeofday() requires some extra calculations, but retrieving the current
jiffies does not even requires a function call. Furthermore, timers are set
according by jiffies-time, so it saves the overhead of converting from jiffies
to struct timeval and vice versa.

Don't have too many kernel timers:
----------------------------------

During the initial version of the kernel module we allocated one timer for
each packet that was to be delayed. That turned out to be a wonderful way to 
crash the kernel. 

We strongly recommend to avoid this practice, and to try to allocate one timer
at a timer, so that each timer handler will allocate the next timer.

(note that we knew we would eventually have to do it the other way, but one
should know in advance that the kernel cannot handle too many active timers)

Why we did not use Kernel threads:
----------------------------------

We did not use kernel threads for several reasons, despite the fact that 
kernel 2.4 supports them well:

1. Most people try to avoid using them inside their kernel modules.

2. The Netfilter architecture parallelizes handling the incoming packets for us,
assuming it is an SMP machine.

3. It would be faster and have less overhead to write the code asynchronously
rather than having several threads running inside the kernel.

Excessive kmalloc is your enemy
-------------------------------

If possible use vectors of structs instead of vectors to pointers to structs.
I.e:

struct mystruct myarray[100];
struct mystruct * myarray;

That is, assuming mystruct is relatively small. Otherwise, it would probably
be a better idea to use kmalloc() or your own data allocation system with 
fixed records.

The Internet is Your Friend
---------------------------

We found a lot of useful information about programming in kernel-mode, either
by consulting people of various Linux-related mailing list or by searching
the web using Google and other resources.

We encourage everyone who reads this document to make liberal use of the
Internet to get help with his project.

Exceptions should be used with care
-----------------------------------

Exceptions are Evil (with a capital "E") in C++, much less in ANSI C. We 
decided not to use them due to the fact that C does not have garbage 
collection and because it may mean our code will be killed due to 
an exception that was not caught.

In Perl, however, which supports exceptions, and has garbage collection, we
used exceptions extensively. We did not use them in the arbitrator and the 
translator, but it made our life when writing the parser easier, because we
did not have to pass an error code.

We strongly recommend C++ programmers not to use exceptions in their code. But
programmers of Perl and similar languages may use them with care.

The Virtue of Comments and Meaningful Variable Names:
-----------------------------------------------------

When we worked together on our computer assignments for the Technion course 
"Structure of Operating Systems", we had a very good coding methodology: 
we commented our code as we wrote it, sometimes even writing a comment
before we wrote the code. This resulted in a very well commented code. 
Unfortunately, for this project we were anxious to finish it in time for 
the end of the Summer semester, so we did not added too many comments in the
code.

Shlomi encountered a previous place where he wrote a relatively organized code
, which was found hard to understand by a fellow programmer, due to its lack
of comments. Therefore, he spent part of the time between two stable releases 
of it to add a lot of comments to the code.

We also spent some time adding comments a posteriori, mostly in places we saw
fit to explain. Nevertheless, our original methodology is usually the best
approach.

Another issue that should be considered is having meaningful variable names. 
Comments are by no means an excuse not to have them, as meaningful variable 
names help the reader and maintainer follow the code. In this case, we were
consistent with this strategy in this project and in the two other cases
we mentioned.

References:

/* You Are Expected to Understand This */ - a "Freshmeat" editorial with many
comments (including one by Shlomi Fish).

http://freshmeat.net/articles/view/238/

The Freecell Solver Homepage - Shlomi's project which was mentioned here.

http://vipe.technion.ac.il/~shlomif/freecell-solver/





